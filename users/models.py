from django.db import models
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.utils.translation import gettext_lazy as _


class UserManager(BaseUserManager):
    """Define a model manager for User model with no username field."""

    def _create_user(self, email, username, password=None, **extra_fields):
        """Create and save a User with the given email and password."""
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(email=email, username=username, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_user(self, email, username, password=None, **extra_fields):
        """Create and save a regular User with the given email and password."""
        extra_fields.setdefault('is_staff', False)
        extra_fields.setdefault('is_superuser', False)
        return self._create_user(email, username, password, **extra_fields)

    def create_superuser(self, email, username, password=None, **extra_fields):
        """Create and save a SuperUser with the given email and password."""
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')
        return self._create_user(email, username, password, **extra_fields)


class User(AbstractUser):
    """
    Custom User model for DeadDevelopers platform.
    Extends the standard Django User model to track AI usage and other platform-specific attributes.
    """
    email = models.EmailField(_('email address'), unique=True)
    ai_percentage = models.IntegerField(
        _('AI usage percentage'),
        default=0,
        help_text=_('Percentage of code generated by AI (0-100)')
    )
    bio = models.TextField(_('biography'), blank=True)
    avatar = models.ImageField(
        _('avatar'),
        upload_to='avatars/',
        blank=True,
        null=True
    )
    
    # Social links
    github_username = models.CharField(max_length=50, blank=True)
    twitter_username = models.CharField(max_length=50, blank=True)
    website = models.URLField(max_length=200, blank=True)
    
    # Preferences
    theme_preference = models.CharField(
        max_length=20,
        choices=[('dark', 'Dark'), ('light', 'Light')],
        default='dark'
    )
    
    # Metrics
    challenge_count = models.IntegerField(default=0)
    completed_projects = models.IntegerField(default=0)
    
    # Set the custom manager
    objects = UserManager()
    
    # Required for Django-Allauth
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']
    
    class Meta:
        verbose_name = _('user')
        verbose_name_plural = _('users')
    
    def __str__(self):
        return self.email
    
    def get_display_name(self):
        if self.first_name and self.last_name:
            return f"{self.first_name} {self.last_name}"
        return self.username
